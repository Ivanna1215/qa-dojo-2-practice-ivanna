// синхронний код блокує інші операції коду
// JS -однопоточна мова програмування яка використовує механізми асинхронності для того щоб не блокувати виконаня коду

// callback

// async ми використовуємо щоб промаркувати якусь функцію як асихронну
// await  ми використовуємо в цій асинхронній функції для того щоб дочекатись поки виконання коду закінчиться і не переходити далі

// коли один крок блокує виконання іншого кроку це є синхронність коли кроки залежні один від одного
// асинхронність це коли дію можна виконувати паралельно не блокуючи один одного
// наприклад замовлення піци , ми замовили піцу і поки піца готується ми можемо щось робити ми не заблоковані

// асинхронні операції не блокують одна одну
// синхронні блокують

// суть call back функції це передача однієї функції всередину іншої

/* Проміс - це об'єкт який представляє результат виконання асинхронної операції Він може перебувати в одному з трьох станів :
**Pending (очікування) : Операція ще не завершена
**Fullfilled (виконано) : Операція успішно завершена
**Rejected : Операція зазнала невдачі

*/

const promise = new Promise((resolve, reject) => {
  let success = false;
  setTimeout(() => {
    if (success) {
      resolve("Success");
    }

    if (!success) {
      reject("WE have error");
    }
  }, 5000);
});

// statuses :

promise
  .then((result) => {
    console.log(result); // in case success
  })
  .catch((error) => {
    console.log(error);
  });
